---
interface Props {
  currentView?: string;
}

const { currentView = "profile" } = Astro.props;

const accountMenuItems = [
  {
    id: "profile",
    label: "Profile",
    icon: "fas fa-user",
  },
  {
    id: "settings",
    label: "Settings",
    icon: "fas fa-cog",
  },
];

const workspaceMenuItems = [
  {
    id: "members",
    label: "Members",
    icon: "fas fa-users",
  },
  {
    id: "bookmark",
    label: "Bookmark",
    icon: "fas fa-bookmark",
  },
  {
    id: "collections",
    label: "Collections",
    icon: "fas fa-layer-group",
  },
];

const purchaseMenuItems = [
  {
    id: "plans",
    label: "Plans",
    icon: "fas fa-check-circle",
  },
  {
    id: "payment-methods",
    label: "Payment Methods",
    icon: "fas fa-credit-card",
  },
  {
    id: "licences",
    label: "Licences",
    icon: "fas fa-file-contract",
  },
  {
    id: "downloads",
    label: "Downloads",
    icon: "fas fa-download",
  },
];
---

<div class="flex w-64 flex-col ">
  
  <!-- Navigation -->
  <nav class="flex-1 space-y-8 px-4 py-6">
    <!-- Account Section -->
    <div>
      <h3 class="mb-3 px-3 text-xs font-semibold tracking-wide text-gray-500 uppercase">
        Account
      </h3>
      <div class="space-y-1">
        {accountMenuItems.map((item) => (
          <button
            data-view={item.id}
            class={`sidebar-menu-item flex w-full items-center space-x-3 rounded-lg px-3 py-2 text-sm transition-colors duration-200 ${
              currentView === item.id
                ? "bg-gray-100 text-gray-900"
                : "text-gray-600 hover:bg-gray-50 hover:text-gray-900"
            }`}
          >
            <i class={`${item.icon} h-5 w-5`}></i>
            <span>{item.label}</span>
          </button>
        ))}
      </div>
    </div>

    <!-- Workspace Section -->
    <div>
      <h3 class="mb-3 px-3 text-xs font-semibold tracking-wide text-gray-500 uppercase">
        Workspace
      </h3>
      <div class="space-y-1">
        {workspaceMenuItems.map((item) => (
          <button
            data-view={item.id}
            class={`sidebar-menu-item flex w-full items-center space-x-3 rounded-lg px-3 py-2 text-sm transition-colors duration-200 ${
              currentView === item.id
                ? "bg-gray-100 text-gray-900"
                : "text-gray-600 hover:bg-gray-50 hover:text-gray-900"
            }`}
          >
            <i class={`${item.icon} h-5 w-5`}></i>
            <span>{item.label}</span>
          </button>
        ))}
      </div>
    </div>

    <!-- Purchases Section -->
    <div>
      <h3 class="mb-3 px-3 text-xs font-semibold tracking-wide text-gray-500 uppercase">
        Purchases
      </h3>
      <div class="space-y-1">
        {purchaseMenuItems.map((item) => (
          <button
            data-view={item.id}
            class={`sidebar-menu-item flex w-full items-center space-x-3 rounded-lg px-3 py-2 text-sm transition-colors duration-200 ${
              currentView === item.id
                ? "bg-gray-100 text-gray-900"
                : "text-gray-600 hover:bg-gray-50 hover:text-gray-900"
            }`}
          >
            <i class={`${item.icon} h-5 w-5`}></i>
            <span>{item.label}</span>
          </button>
        ))}
      </div>
    </div>
  </nav>

</div>

<script>
  // Client-side menu interaction
  document.addEventListener('DOMContentLoaded', () => {
    const menuItems = document.querySelectorAll('.sidebar-menu-item');
    
    menuItems.forEach(item => {
      item.addEventListener('click', (e) => {
        const viewId = (e.currentTarget as HTMLElement).dataset.view;
        if (viewId) {
          // Dispatch custom event for React component to listen
          window.dispatchEvent(new CustomEvent('dashboard-view-change', {
            detail: { view: viewId }
          }));
          
          // Update active states
          menuItems.forEach(mi => {
            mi.classList.remove('bg-gray-100', 'text-gray-900');
            mi.classList.add('text-gray-600');
          });
          
          (e.currentTarget as HTMLElement).classList.add('bg-gray-100', 'text-gray-900');
          (e.currentTarget as HTMLElement).classList.remove('text-gray-600');
        }
      });
    });
  });
</script>
