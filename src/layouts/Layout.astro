---
import { ClientRouter } from "astro:transitions";
import { SEO } from "astro-seo";
import Footer from "@components/footer.astro";
import Navbar from "@components/navbar/navbar.astro";


import "@fontsource-variable/inter/index.css";
import "@fontsource-variable/inter-tight/index.css";
import "@fortawesome/fontawesome-free/css/all.min.css";
import "../styles/global.css";
import "@plusui/library/dist/index.css";

export interface Props {
  title?: string;
  footerMargin?: boolean;
  theme?: "light" | "dark";
  headerTheme?: "light" | "dark";
  noNavbar?: boolean;
  noFooter?: boolean;
  headerBorder?: boolean;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site).toString();

const resolvedImageWithDomain = new URL(
  "/opengraph.jpg",
  Astro.site
).toString();

const {
  title,
  footerMargin = true,
  theme = "light",
  headerTheme = "light",
  noNavbar = false,
  noFooter = false,
  headerBorder = false,
} = Astro.props;

const makeTitle = title
  ? title + " | " + "Plus UI Library"
  : "Plus UI Library - UI Library with high-quality components ";
---

<!doctype html>
<html lang="en" data-theme={theme}>
  <head>

    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <SEO
      title={makeTitle}
      description="Plus UI Library - UI Library with high-quality components for Astro."
      canonical={canonicalURL}
      twitter={{
        creator: "@plusui",
        site: "@plusui",
        card: "summary_large_image",
      }}
      openGraph={{
        basic: {
          url: canonicalURL,
          type: "website",
          title: `Plus UI Library - UI Library with high-quality components for Astro`,
          image: resolvedImageWithDomain,
        },
        image: {
          alt: "Plus UI Library - UI Library with high-quality components for Astro",
        },
      }}
    />
    <style is:global>
      /* Improve Page speed */
      /* https://css-tricks.com/almanac/properties/c/content-visibility/ */
      img {
        content-visibility: auto;
      }
    </style>

    <ClientRouter />
  </head>
  <body class="font-sans antialiased text-color-default bg-color-surface">
    {!noNavbar && <Navbar headerTheme={headerTheme} headerBorder={headerBorder} />}
    <slot />
    {!noFooter && <Footer margin={footerMargin} />}
    
    <script>
      import "@plusui/library/cdn/components/index.js";
    </script>
    
    <script>
      // Global navigation timing logger
      let navigationStartTime = performance.now();
      
      // Page start log
      console.log(`üöÄ [Navigation] Sayfa y√ºkleniyor: ${window.location.pathname}`);
      
      // DOMContentLoaded timing
      document.addEventListener('DOMContentLoaded', () => {
        const domTime = performance.now() - navigationStartTime;
        console.log(`üìÑ [Navigation] DOM hazƒ±r: ${domTime.toFixed(2)}ms`);
      });
      
      // Complete page load timing
      window.addEventListener('load', () => {
        const loadTime = performance.now() - navigationStartTime;
        console.log(`‚úÖ [Navigation] Sayfa tamamen y√ºklendi: ${loadTime.toFixed(2)}ms`);
        
        // Check for slow loading resources
        setTimeout(() => {
          if (performance.getEntriesByType) {
            const resources = performance.getEntriesByType('resource');
            const apiCalls = resources.filter(r => r.name.includes('plus-ui-backend.onrender.com'));
            
            if (apiCalls.length > 0) {
              console.log(`üì° [Navigation] Backend API √ßaƒürƒ±larƒ±:`);
              apiCalls.forEach(api => {
                const responseTime = api.responseEnd - api.responseStart;
                const totalTime = api.responseEnd - api.requestStart;
                console.log(`   ${api.name}: Response ${responseTime.toFixed(2)}ms, Total ${totalTime.toFixed(2)}ms`);
              });
            }
          }
        }, 100);
      });
      
      // Monitor link clicks for navigation timing
      document.addEventListener('click', (e) => {
        const link = e.target.closest('a');
        if (link && link.href && !link.href.startsWith('mailto:') && !link.href.startsWith('tel:')) {
          const isInternalLink = link.href.includes(window.location.origin);
          if (isInternalLink) {
            console.log(`üîó [Navigation] Link tƒ±klandƒ±: ${link.href}`);
            navigationStartTime = performance.now();
          }
        }
      });
      
      // Backend keep-alive ping system
      let pingInterval;
      
      function startBackendPing() {
        // Her 4 dakikada bir backend'e ping at (Render.com free tier 5 dakikada uyuyor)
        pingInterval = setInterval(async () => {
          try {
            console.log('üèì [Ping] Backend keep-alive ping g√∂nderiliyor...');
            const startTime = performance.now();
            
            // Simple HEAD request to keep backend awake
            const response = await fetch('https://plus-ui-backend.onrender.com/', {
              method: 'HEAD',
              mode: 'no-cors'
            });
            
            const endTime = performance.now();
            console.log(`üèì [Ping] Backend yanƒ±t verdi: ${(endTime - startTime).toFixed(2)}ms`);
          } catch (error) {
            console.log('üèì [Ping] Backend ping hatasƒ± (normal):', error.message);
          }
        }, 4 * 60 * 1000); // 4 dakika
      }
      
      function stopBackendPing() {
        if (pingInterval) {
          clearInterval(pingInterval);
          pingInterval = null;
          console.log('üèì [Ping] Backend ping durduruldu');
        }
      }
      
      // Sayfa g√∂r√ºn√ºrse ping'i ba≈ülat, gizlenirse durdur
      document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible') {
          console.log('üëÅÔ∏è [Ping] Sayfa g√∂r√ºn√ºr, ping ba≈ülatƒ±lƒ±yor');
          startBackendPing();
        } else {
          console.log('üëÅÔ∏è [Ping] Sayfa gizli, ping durduruluyor');
          stopBackendPing();
        }
      });
      
      // Sayfa y√ºklendiƒüinde ping'i ba≈ülat
      if (document.visibilityState === 'visible') {
        startBackendPing();
      }
    </script>
  </body>
</html>
