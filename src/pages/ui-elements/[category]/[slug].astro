---
import { getCollection } from 'astro:content'
import Layout from '@layouts/Layout.astro'
import { Container } from '@components/layout'
import Playground from '@components/Playground.astro'
import CodePreview from '@components/CodePreview.astro'
import { Icon } from 'astro-icon/components'

export const prerender = true

export async function getStaticPaths() {
  const allElements = await getCollection('ui-elements')

  return allElements.map((element) => ({
    params: {
      category: element.data.category,
      slug: element.data.slug || element.slug.split('/').pop(),
    },
    props: { element },
  }))
}

const { element } = Astro.props
const { category } = Astro.params
const { data, render } = element
const { Content } = await render()
---

<Layout title={`${data.title} - UI Elements`}>
  <Container class="flex flex-col gap-16 py-16 lg:gap-24">
    <!-- Header Section -->
    <header class="">
      <!-- Top Navigation Row -->
      <div
        class="flex flex-col gap-4 pb-6 sm:flex-row sm:items-center sm:justify-between sm:gap-0"
      >
        <!-- Breadcrumb -->
        <nav class="flex items-center" aria-label="Breadcrumb">
          <div class="flex items-center gap-2.5">
            <a
              href="/ui-elements"
              class="text-color-placeholder hover:text-color-default text-lg font-medium transition-colors duration-200"
            >
              UI Elements
            </a>
            <span class="text-color-placeholder text-sm font-medium">/</span>
            <a
              href={`/ui-elements/${category}`}
              class="text-color-placeholder hover:text-color-default text-lg font-medium capitalize transition-colors duration-200"
            >
              {category}
            </a>
            <span class="text-color-placeholder text-sm font-medium">/</span>
            <span class="text-color-default text-lg font-medium">
              {data.title}
            </span>
          </div>
        </nav>

        <!-- Action Buttons -->
        <div class="flex items-center gap-3">
          {
            data.figmaUrl && (
              <plus-button
                size="sm"
                kind="outlined"
                href={data.figmaUrl}
                target="_blank"
                external={true}
              >
                <Icon name="logos:figma" class="h-3.5 w-3.5 flex-shrink-0" />
                <span>Preview in Figma</span>
              </plus-button>
            )
          }

          {
            data.docsUrl && (
              <plus-button
                size="sm"
                kind="outlined"
                href={data.docsUrl}
                target="_blank"
                external={true}
              >
                <span>Go to docs</span>
                <i class="fa-solid fa-arrow-right" />
              </plus-button>
            )
          }
        </div>
      </div>

      <!-- Title & Description Section -->
      <div class="pt-10">
        <!-- Title -->
        <h1 class="text-color-default mb-3 text-3xl leading-9 font-semibold">
          {data.title}
        </h1>

        <!-- Description -->
        <p class="text-color-default mb-7 text-lg leading-7 font-normal">
          {data.description}
        </p>

        <!-- Chips/Tags -->
        <div class="flex flex-wrap items-start gap-4">
          {
            data.variantCount && (
              <plus-chip kind="filled" shape="full" status="default" invert>
                <i class="fa-solid fa-check" />
                <span>{data.variantCount} Variant</span>
              </plus-chip>
            )
          }

          {
            data.variableCount && (
              <plus-chip kind="filled" shape="full" status="default" invert>
                <i class="fa-solid fa-check" />
                <span>{data.variableCount} Variables</span>
              </plus-chip>
            )
          }

          {
            data.modeSupport && (
              <plus-chip kind="filled" shape="full" status="default" invert>
                <i class="fa-solid fa-check" />
                <span>Mode Support</span>
              </plus-chip>
            )
          }
        </div>
      </div>
    </header>

    <!-- Playground Section -->
    {
      (data.displayMode === 'playground' || data.displayMode === 'both') &&
        data.hasPlayground && (
          <Playground
            category={data.category}
            componentName={
              data.slug || element.slug.split('/').pop() || 'unknown'
            }
            variationId="default"
            variationName={data.title}
          />
        )
    }

    <!-- Variants Section -->
    {
      data.variations && data.variations.length > 0 && (
        <div class="space-y-24">
          {data.variations.map((variation, index) => (
            <div>
              {variation.displayMode === 'codepreview' ? (
                <CodePreview
                  category={data.category}
                  componentName={
                    data.slug || element.slug.split('/').pop() || 'unknown'
                  }
                  variationId={variation.id}
                  variationName={variation.name}
                  pricingTier={variation.pricingTier}
                />
              ) : (
                <Playground
                  category={data.category}
                  componentName={
                    data.slug || element.slug.split('/').pop() || 'unknown'
                  }
                  variationId={variation.id}
                  variationName={variation.name}
                />
              )}
            </div>
          ))}
        </div>
      )
    }

    <!-- Content Documentation -->
    <div class="prose prose-base max-w-none">
      <Content />
    </div>
  </Container>
</Layout>
